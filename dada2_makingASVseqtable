#These sequences should've been demultiplexed already 
#and they should be free of any primers. Our sequencing company 
#demultiplexed for us and we started off with fastq files.
#Please see https://benjjneb.github.io/dada2/tutorial.html for an in-depth
#tutorial and more info. This script is a very close adaptation of that tutorial.  


library(dada2); packageVersion("dada2"); citation("dada2")
library(ShortRead); packageVersion("ShortRead")
library(ggplot2); packageVersion("ggplot2")
library(phyloseq); packageVersion("phyloseq")
library(ShortRead)
#set environment
path <- "/Users/emily/mypath"
fns<-list.files(path)
fns

#forward and reverse fastq filenames
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))

#sample names
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
#inspect quality read profiles
pdf(file="qp1_t1mergedfinal_updated.pdf")
plotQualityProfile(fnFs[1:10])
dev.off()

pdf(file="qp2_t1mergedfinal_updated.pdf")
plotQualityProfile(fnRs[1:10])
dev.off()




# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

#truncLen can be modified
#I used this because the DADA2 tutorial used the same primers and Miseq 2x250bp that we used 
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
              maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
              compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE

head(out)
tail(out)

#error rates
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)

pdf(file="final_error_rates_forward.pdf")
plotErrors(errF, nominalQ=TRUE)
dev.off()

pdf(file="final_error_rates_reverse.pdf")
plotErrors(errR, nominalQ=TRUE)
dev.off()

#apply core sample inference algorithm to dereplicated data
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
dadaFs[[1]]
dadaRs[[1]]

#merged paired data
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
summary((mergers[[1]]))

#make your seq data
seqtab <- makeSequenceTable(mergers)
dim(seqtab)

# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))

pdf(file="plot_table_seqs_all.pdf")
plot(table(nchar(getSequences(seqtab))))
dev.off()

#### Optional
seqtab2 <- seqtab[,nchar(colnames(seqtab)) %in% seq(286,297)] #again, being fairly conservative wrt length
table(nchar(getSequences(seqtab2)))
dim(seqtab2)

#NOW MOVE ON with seqtab 2 but can always go back and modify for seqtab
remove chimeras
#The core dada method removes substitution and indel errors, but chimeras remain. 
#Fortunately, the accuracy of the sequences after denoising makes identifying chimeras easier 
#than it is when dealing with fuzzy OTUs: all sequences which can be exactly reconstructed as 
#a bimera (two-parent chimera) from more abundant sequences.

seqtab.nochim <- removeBimeraDenovo(seqtab2, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)

sum(seqtab.nochim)/sum(seqtab2) 

#The fraction of chimeras varies based on factors including experimental procedures and sample complexity, 


#track reads through pipeline
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
write.csv(track,file="merged_seqtab_filter_stats.csv",row.names=TRUE, quote=FALSE)

#assign taxonomy
#download the SILVA training set of your choice. I used v138. Place this in your path (folder). 
 
taxa <- assignTaxonomy(seqtab.nochim, "/Users/emily/mypath/silva_nr99_v138_train_set.fa.gz", multithread=TRUE)


#inspect taxa
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
tail(taxa.print)

#saveRDS object to work out in R on laptop
#saveRDS(seqtab1.nochim, file="seqtab.rds")

saveRDS(seqtab.nochim, file="seqtab_acermicro.rds")
saveRDS(taxa, file="taxa_acermicro.rds")

#make sure you can read your rds object
tax=readRDS("taxa_acermicro.rds")

#and alternately, write your csv 
write.csv(tax, "taxa_acermicro.csv")
